@model RDAT.ViewModels.SingleBatchViewModel

@{
    ViewData["Title"] = "Grid"; Layout = "~/Views/Shared/_Layout.cshtml";
    WebGrid grid = new WebGrid(HttpContextAccessor, source: this.Model.TestingLogs, defaultSort: "Driver_Name", rowsPerPage: 10000);
}
<style>
    .table td {
        width: 25%;
    }

    .w100 {
        width: 100px;
    }

    .margin10 {
        margin-left: 10px;
    }

    .thinColumn {
        width: 50px;
    }

    .wideColumn {
        width: 150px;
    }
</style>
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">

                    <h1><i class="nav-icon fas fa-th mr-2"></i>Outstanding @ViewBag.type</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item active">View Outstanding</li>
                    </ol>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>
    <!-- Main content -->
    <section class="content">

        <!-- Default box -->
        <div class="card">
            <div class="card-body">
                <!-- Small boxes (Stat box) -->
                <div class="row">

                    @grid.GetHtml(tableStyle: "table table-bordered", columns: grid.Columns(

                    grid.Column("Driver_Id", header: "ID"),

                    grid.Column("Driver_Name", header: "Driver Name"),

                    grid.Column("Test_Type", header: "Type", style: "thinColumn", format: @<text><div class="edit" data-id="@item.Id" data-propertyname="Test_Type">@item.Test_Type</div></text>),


grid.Column("Reported_Results", header: "Reported Results", format: @<text><div class="editable-select" data-id="@item.Id" data-propertyname="Reported_Results">@item.Reported_Results</div></text>),

grid.Column("ResultsDate", header: "Results Date", format: @<text>
                    <div class="editDate btn btn-outline-secondary wideColumn" data-id="@item.Id" data-propertyname="ResultsDate">
                        @(@item.ResultsDate==null?" ":string.Format("{0:dd MMM yyyy}", item.ResultsDate))
                    </div>
</text>),



grid.Column("ClosedDate", header: "Closed Date", format: @<text>
    <div class="editDate btn btn-outline-secondary wideColumn" data-id="@item.Id" data-propertyname="ClosedDate">
        @(@item.ClosedDate==null?" ":string.Format("{0:dd MMM yyyy}", item.ClosedDate))
    </div>
</text>)

))

                </div>
            </div>

        </div>
        <!-- /.card-body -->
        <div class="card-footer">
            <div class="card-tools">

                FOOTER
            </div>

        </div>
        <!-- /.card-footer-->
        <!-- /.card -->
    </section>
    <!-- /.content -->
</div>
<link href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>


<script src="https://www.appelsiini.net/download/jquery.jeditable.js"></script>
<script src="~/theme/dist/js/jquery.jeditable.datepicker.js"></script>
<script>
    $(document).ready(function () {
        $('.edit').editable('/reports/saveTestingLog', {
            cssclass: 'jeditForm',
            tooltip: 'click to edit me...',
            width: 'none',
            height: 'none',
            onsubmit: function (settings, original) {
                oldValue = original.revert;
            },
            submitdata: function () {
                return {
                    id: $(this).data('id'),
                    PropertyName: $(this).data('propertyname')
                }
            },
            callback: function (value, settings) {
                var jsonData = $.parseJSON(value);
                if (jsonData.status) {
                    $(this).text(jsonData.value);
                }
                else {
                    $(this).text(oldValue);
                }
            }
        })

        $(".editable-select").editable("/reports/saveTestingLog", {
            type: "select",
            submit: 'Ok',
            // this data will be sorted by value
            data: '{"0":"Select One","1":"Positive","2":"Negative","3":"Excused", "4":" ", "selected":" "}',
            onsubmit: function (settings, original) {
                oldValue = original.revert;
            },
            submitdata: function () {
                return {
                    id: $(this).data('id'),
                    PropertyName: $(this).data('propertyname')
                }
            },
            callback: function (value, settings) {
                var jsonData = $.parseJSON(value);
                if (jsonData.status) {
                    $(this).text(jsonData.value);
                }
                else {
                    $(this).text(oldValue);
                }
            },
            style: "inherit",
        });

        $('.editSelect').editable('/reports/saveTestingLog', {
            cssclass: 'jeditForm',
            tooltip: 'click to edit me...',
            width: 'none',
            height: 'none',
            type: 'select',
            submit: 'Ok',
            loadurl: '/reports/GetResults',
            loaddata: function () {
                console.log("loaddata", $(this).data('id'));
                // return { id: $(this).data('id') }
                return { id: '4' };
            },
            onsubmit: function (settings, original) {
                console.log("onsubmit", original);
                oldValue = original.revert;
            },
            submitdata: function () {
                console.log("submitdata");
                return {
                    id: $(this).data('id'),
                    PropertyName: $(this).data('propertyname')
                }
            },
            callback: function (value, settings) {
                console.log("callback - value =", value);
                // var jsonData = $.parseJSON(value);
                jsonData = value;
                if (jsonData.status) {
                    $(this).text(jsonData.value);
                }
                else {
                    $(this).text(oldValue);
                }
            }
        })

        $('.editSelect').click(function () {
            $('select', this).addClass('form-control pull-left w100');
            $('button', this).addClass('btn btn-sm btn-success margin10')
        })

        $('.editable-select').click(function () {
            $('select', this).addClass('form-control pull-left w100');
            $('button', this).addClass('btn btn-sm btn-success margin10 float-right align-text-top')
        })


        $('.editDate').editable('/reports/saveTestingLog', {
            cssclass: 'jeditForm',
            tooltip: 'click to edit me...',
            type: 'datepicker',
            datepicker: {
                dateFormat: 'dd-mm-yy',
                changeMonth: true,
                changeYear: true,
                yearRange: '2018:2030'
            },
            onsubmit: function (settings, original) {
                oldValue = original.revert;
            },
            submitdata: function () {
                return {
                    id: $(this).data('id'),
                    PropertyName: $(this).data('propertyname')
                }
            },
            callback: function (value, settings) {
                var jsonData = $.parseJSON(value);
                if (jsonData.status) {
                    $(this).text(jsonData.value);
                }
                else {
                    $(this).text(oldValue);
                }
            }
        })



    });
</script>


